---
title: Authentication and Authorization with Verifiable Credentials using did:elsi

editors:
   - name: "Jesus Ruiz"
     email: "hesusruiz@gmail.com"
     company: "JesusRuiz"
     companyURL: "https://hesusruiz.github.io/hesusruiz"

authors:
   - name: "Jesus Ruiz"
     email: "hesusruiz@gmail.com"
     company: "JesusRuiz"
     companyURL: "https://hesusruiz.github.io/hesusruiz"
   - name: "Jörg Langkau "
     email: "jlangkau@nicos-ag.com"
     company: "nicos AG"
     companyURL: "https://www.nicos-ag.com/"

copyright: >
   Copyright © 2023 the document editors/authors. Text is available under the
   <a rel="license" href="https://creativecommons.org/licenses/by/4.0/legalcode">
   Creative Commons Attribution 4.0 International Public License</a>

latestVersion: "https://alastria.github.io/did-method-elsi/authzn.html"
edDraftURI: "https://alastria.github.io/did-method-elsi/authzn.html"
github: "https://github.com/alastria/did-method-elsi/blob/main/authzn.html"
og_description: >
    Authentication and Authorization with Verifiable Credentials using using did:elsi
og_site_name: Authn with Verifiable Credentials
rite:
    codeStyle: github

localBiblio:
    "ETSI-CERTOVERVIEW":
        title: "ETSI EN 319 412-1 V1.4.2 (2020-07) - Electronic Signatures and Infrastructures (ESI); Certificate Profiles; Part 1: Overview and common data structures"
        href: "https://www.etsi.org/deliver/etsi_en/319400_319499/31941201/01.04.02_20/en_31941201v010402a.pdf"
        date: "2020-07"
        publisher: "ETSI"
    "ETSI-LEGALPERSON":
        title: "ETSI EN 319 412-3 V1.2.1 (2020-07) - Electronic Signatures and Infrastructures (ESI); Certificate Profiles; Part 3: Certificate profile for certificates issued to legal persons"
        href: "https://www.etsi.org/deliver/etsi_en/319400_319499/31941203/01.02.01_60/en_31941203v010201p.pdf"
        date: "2020-07"
        publisher: "ETSI"
    "ETSI-JADES":
        title: "ETSI TS 119 182-1 V1.1.1 (2021-03) - Electronic Signatures and Infrastructures (ESI); JAdES digital signatures; Part 1: Building blocks and JAdES baseline signatures"
        href: "https://www.etsi.org/deliver/etsi_ts/119100_119199/11918201/01.01.01_60/ts_11918201v010101p.pdf"
        date: "2021-03"
        publisher: "ETSI"
    "DEP-DSS":
        title: "Algorithm for Validation of qualified and advanced signatures and seals"
        href: "https://ec.europa.eu/digital-building-blocks/wikis/display/DIGITAL/Qualified+electronic+signature+-+QES+validation+algorithm"
        date: "2019-10"
        publisher: "European Commission"
    "DID-PRIMER":
        title: "DID Primer"
        href: "https://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2017/blob/master/topics-and-advance-readings/did-primer.md"
        publisher: "Rebooting the Web of Trust 2017"
    "DID-ELSI":
        title: "DID ETSI Legal person Semantic Identifier Method Specification (did:elsi)"
        href: "https://alastria.github.io/did-method-elsi/"
        date: "04 June 2023"
    "DID-DNS":
        title: "The Decentralized Identifier (DID) in the DNS"
        href: "https://tools.ietf.org/html/draft-mayrhofer-did-dns-01"
        status: "Internet Draft"
        publisher: "IETF"
    "DIF.PresentationExchange":
        title: "Presentation Exchange 2.0.0"
        href: "https://identity.foundation/presentation-exchange/spec/v2.0.0/"
    "OWASP-TRANSPORT":
        title: "Transport Layer Protection Cheatsheet"
        href: "https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet"
    "OpenID.Core":
        title: "OpenID Connect Core 1.0 incorporating errata set 1"
        href: "http://openid.net/specs/openid-connect-core-1_0.html"
        date: "8 November 2014"
    "OpenID.VCI":
        title: "OpenID for Verifiable Credential Issuance"
        date: "3 February 2023"
        href: "https://openid.net/specs/openid-4-verifiable-credential-issuance-1_0.html"
    "OpenID.SIOP2":
        title: "Self-Issued OpenID Provider v2"
        date: "28 January 2022"
        href: "https://openid.bitbucket.io/connect/openid-connect-self-issued-v2-1_0.html"
    "OpenID.VP":
        title: "OpenID for Verifiable Presentations"
        date: "21 April 2023"
        href: "https://openid.net/specs/openid-4-verifiable-presentations-1_0.html"
    "RFC6749":
        title: "The OAuth 2.0 Authorization Framework"
        href: "https://www.rfc-editor.org/rfc/rfc6749.html"
    "RFC8414":
        title: "OAuth 2.0 Authorization Server Metadata"
        href: "https://www.rfc-editor.org/rfc/rfc8414"
    "RFC7515":
        title: "JSON Web Signature (JWS)"
        href: "https://www.rfc-editor.org/rfc/rfc7515"
    "RFC8725":
        title: "JSON Web Token Best Current Practices"
        href: "https://www.rfc-editor.org/rfc/rfc8725"
    "RFC7519":
        title: "JSON Web Token (JWT)"
        href: "https://www.rfc-editor.org/rfc/rfc7519"
    "DID-ELSI":
        title: "DID ETSI Legal person Semantic Identifier Method Specification (did:elsi)"
        href: "https://alastria.github.io/did-method-elsi/"
        date: "04 June 2023"
    "DID-ONBOARDING":
        title: "Onboarding example with LEARCredential using did:elsi"
        href: "https://alastria.github.io/did-method-elsi/onboarding.html"
        date: "04 June 2023"
    "NIST-AUTH":
        title: "NIST Special Publication 800-178: A Comparison of Attribute Based Access Control (ABAC) Standards for Data Service Applications"
        href: "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-178.pdf"
        date: "October 2016"
---

<section #abstract>

    Once an organisation has onboarded an ecosystem like a Data Space, some of its employees have to be appointed to enable them to perform a concrete set of activities in the ecosystem. These activities are performed in the web portals of different organisations which are already participants in the ecosystem, like the onboarding service, the marketplace portals and also in the web portals of other participants.

    This document describes how:
    
    <ul>
        - An organisation can issue Verifiable Credentials to its employees enabling them to perform some specific processes in other organisations "on-behalf-of" the employer
        - Other organisations can accept those Verifiable Credentials to perform authentication and access control.
        
    We assume that all organisations have onboarded in the ecosystem using the mechanisms described in [[[DID-ELSI]]] and [[[DID-ONBOARDING]]].


<section id="conformance">

<section>Introduction

    Once an organisation has onboarded an ecosystem like a Data Space, some of its employees have to be appointed to enable them to perform a concrete set of activities in the ecosystem. These activities are performed in the web portals of different organisations which are already participants in the ecosystem, like the onboarding service, the marketplace portals and also in the web portals of other participants.

    This document describes how:
    
    <ul>
        - An organisation can issue Verifiable Credentials to its employees enabling them to perform some specific processes in other organisations "on-behalf-of" the employer
        - Other organisations can accept those Verifiable Credentials to perform authentication and access control.
        
    We assume that all organisations have onboarded in the ecosystem using the mechanisms described in [[[DID-ELSI]]] and [[[DID-ONBOARDING]]].
    
    The appointed employee will perform the process by using a special type of Verifiable Credential called `LEARCredential` (from <b>L</b>egal <b>E</b>ntity <b>A</b>ppointed <b>R</b>epresentative).

    To achieve a high level of legal certainty under eIDAS, the LEARCredential is:
    
    <ul>
        - signed or sealed with an eIDAS certificate which is either:

            <ul>
                - a <b>certificate for electronic seals</b> issued to a legal person by a Qualified Trust Service Provider, or
                - a <b>certificate for electronic signatures</b>, issued to a <b>legal representative of the legal person</b> by a Qualified Trust Service Provider.
        - signed using the <b>JSON Advanced Electronic Signature</b> format described in [[[ETSI-JADES]]]

    The LEARCredential includes claims identifying the employee and a description of the concrete powers that have been delegated by the legal representative of the organisation.

    By signing/sealing the credential with an eIDAS certificate, the legal representative attests that the powers described in the credential have been delegated to the employee (maybe under some conditions, also described in the credential).

    In this way, the LEARCredential has the same legal status as any other document in other formats (e.g., PDF) signed in an eIDAS-compliant way, but with all the advantages provided by the Verifiable Credential format.

    In addition, the LEARCredential includes cryptographic material that allows the appointed employee to <b>use the credential as an online authentication mechanism</b> in a portal, by proving that the holder of the credential is the same person identified in the credential.

    Any Verifier that trusts the eIDAS Trust Framework will be able to verify that:

    <ul>
        - <b>The person presenting the LEARCredential is the same as the one identified in the credential</b>
        - <b>A legal representative of the organisation has attested that the person has the powers described in the credential</b>

    This enables the person presenting the LEARCredential to start the process and to provide any additional required documentation, preferably as additional Verifiable Credentials to enable automatic verification of compliance with the process requirements (including Gaia-X credentials issued by the Compliance Service of Gaia-X). 

    Both types of eIDAS certificates mentioned above are an electronic attestation <b>that links electronic seal/signature validation data to a legal person and confirms the name of that person</b>. This way, the certificate, usually linked to the sealed/signed document, can be used to verify the identity of the creator of the seal/signature and whether the document has been sealed/signed using the corresponding private key.

    Before issuing a certificate like the above, the Qualified Trust Service Provider (QTSP) performs validations against `Authentic Sources` to authenticate the identity of the organisation:

    <ul>
        - The data concerning the business name or corporate name of the organisation.
        - The data relating to the constitution and legal status of the subscriber.
        - The data concerning the extent and validity of the powers of representation of the applicant.
        - The data concerning the tax identification code of the organisation or equivalent code used in the country to whose legislation the subscriber is subject.

    The person controlling the above certificates will appoint a legal entity representative (LEAR) by generating and signing a Verifiable Credential which:

    <ul>
        - Includes identification data of an employee of the organisation
        - Includes claims stating the delegation of specific powers to perform a set of specific processes on behalf of the organisation
        - Includes a public key where the corresponding private key is controlled by the employee, enabling him to prove that he is the holder of the credential when it is being used in an authentication process like the ones used as examples in this document.

    The LEARCredential uses the `did:elsi` method for the identifiers of legal persons involved in the process, to facilitate the DID resolution and linkage with the eIDAS certificates. The `did:elsi` method is specified in [[[DID-ELSI]]].    
    
    The high-level view of the process is described in the following diagram, when a COO (Chief Operating Officer) appoints an employee to perform some processes:


    <x-diagram .plantuml>High level view of issuance of LEARCredential
        box "Company" #WhiteSmoke
            actor "Employee of company" as employee
            participant "COO of company" as COO
        end box
        control "Trust Service Provider" as TSP
        database "Authentic Sources" as registry

        COO -> TSP ++: Request a\ncertificate for signatures

        TSP <-> registry: Verify trusted data
        
        TSP -> COO --: Provide certificate for signature

        COO -> employee: Issue LEARCredential

<section>Participants

    Here we introduce the actors of the reference use case we are going to use. The main actors are marked in yellow in the following diagram.
    
    RealTruth is a Trust Service Provider operating under the eIDAS Trust Framework, which issues a certificate for seals to the company GoodAir. GoodAir is a business that provides some services using an Air Quality application operated by GoodAir.

    RealTruth also provides a certificate for signatures to the COO of the GoodAir company, so the COO can use the certificate to sign documents on behalf of GoodAir (like contracts, invoices, financial reports, ...) in a way that is compliant with eIDAS.

    The COO of GoodAir will issue a verifiable credential of type LEARCredential to an employee of GoodAir, signing the credential with his certificate for signatures.

    <x-diagram .d2>
        classes: {
            participant: {
                style: {
                    fill: "aqua"
                }
            }
            multiple: {
                style: {
                    multiple: true
                }
            }
        }

        eIDAS: eIDAS Trust Framework {
            icon: /images/eu_trust_mark.jpg
        }
        eIDAS.style.fill: transparent

        DE_TL: Germany Trusted List

        RealTruth: RealTruth TSP {

            Seal: Certificate\nfor seal
            Seal.shape: oval

            Sign: Certificate\nfor signature
            Sign.shape: oval

        }
        RealTruth.class: participant

        OtherG: Other TSPs {
            S3.shape: circle
            S3: Cert\nfor Sign
            S4.shape: circle
            S4: Cert\nfor Seal
        }
        OtherG.class: multiple

        DE_TL -> RealTruth
        DE_TL -> OtherG

        Other_Countries: Other Trusted Lists
        Other_Countries.style.fill: transparent
        Other_Countries.class: multiple

        TSP1 {
            S1.shape: circle
            S1: Cert\nfor Sign
            S2.shape: circle
            S2: Cert\nfor Seal
        }

        TSPn {
            S3.shape: circle
            S3: Cert\nfor Sign
            S4.shape: circle
            S4: Cert\nfor Seal
        }

        GoodAir {
            COO
            Employee
        }
        GoodAir.class: participant

        eIDAS -> DE_TL
        eIDAS -> Other_Countries


        RealTruth.Seal -> GoodAir: Issue Cert for Seals {
            style: {
                font-size: 30
            }
        }
        RealTruth.Sign -> GoodAir.COO: Issue Cert for Signatures {
            style: {
                font-size: 30            }
        }

        Other_Countries -> TSP1
        Other_Countries -> TSPn

        GoodAir.COO -> GoodAir.Employee: LEARCredential {
            style: {
                font-size: 30
            }
        }

    <section #participant>GoodAir: the company that wants to perform the process

        The new participant is a business providing an Air Quality Monitoring application as a service. The business is called GoodAir and it operates the application, which receives data from a set of sensors that may or may not be the property of GoodAir. The sensors must have received a certification to be able to operate and send data to the GoodAir application.

        The company is registered in the tax agency and business registry of Spain with VAT number <b>VATES-12345678</b>.

    <section>COO (Chief Operating Officer) of GoodAir

        The GoodAir company is small and the only person that can sign contracts on behalf of the company is the COO (Chief Operating Officer). The COO is a legal representative of the company and she is registered as so in the business registry of Spain.

        The COO has a certificate for electronic signatures issued by one of the TSPs in Spain enabling the COO to perform electronic qualified signatures as legal representative of GoodAir, instead of doing them manually.

        The X.509 certificate of the COO has the following contents in the `Subject` field (the example below is derived from a real certificate but with the identifiers modified to be an example):

        <x-code .ini>
            cn = 56565656V Jesus Ruiz
            serialNumber = 56565656V
            givenName = Jesus
            sn = Ruiz
            2.5.4.97 = VATES-12345678
            o = GoodAir
            c = ES
            2.5.4.13 = Notary:Juan Lopez/Protocol Num:7172/Date:07-06-2021

        The above set of fields bind the legal identity of the COO with the identity of the business:

        <ul>
            - `serialNumber` is the unique number recognized by the Spanish Government for spanish citizens (called NIF).
            - `2.5.4.97` is the <a href="https://oidref.com/2.5.4.97">official OID for `organizationIdentifier`</a>. The contents of this field in the example certificate is the unique identifier for the legal person GoodAir.

        Before issuing a certificate like the above, the TSP has to perform some validations to ensure that in the official source of truth (the business registry of Spain in this case) there is already registered information that states that the COO has indeed powers to act on behalf of GoodAir as a legal representative.

    <section>RealTruth: a Trust Service Provider

        RealTruth is an EU TSP, which appears in the TL (Trusted List) maintained by the <a href="https://tl.bundesnetzagentur.de/TL-DE.XML">German Government</a>.
        
        RealTruth is a TSP based in Germany but operates in most of the countries of the EU and so being able to provide Trust Services across many countries, including Spain.

        As all TSPs in the TLs of the Member States, its entry in the TL includes one or more "Services" entries which describe the Trust Services provided by the TSP.

        A TSP can have one Service issuing certificates for signatures, another service issuing certificates for seals, another service for timestamping, etc.

        The regulator approves or suspends each service from a TSP individually, and the services are the root anchor for a given trust environment.

        In our case, the entry for RealTruth in the TL includes a `\<TSPService\>` entry, and inside it the `\<ServiceDigitalIdentity\>` entry includes a DER-encoded certificate specifying the digital identity of the root anchor for that trust domain. The certificate for the Service has in the Subject field:

        <x-code .INI>
            2.5.4.97 = VATDE-170173453
            CN = DRV QC 11 MA CA 2017ca
            OU = QC 11 Mitarbeiter CA
            O = Deutsche Rentenversicherung Westfalen
            C = DE

        Which in the `organizationIdentifier` field (OID 2.5.4.97) specifies the unique organisation identifier assigned by the German regulatory authority to the TSP: VATDE-170173453.

        RealTruth provides `Legal Person Representative Certificates` which are qualified in accordance with Regulation (EU) No. 910/2014 of the European Parliament and of the Council of 23 July 2014 on electronic identification and trust services for electronic transactions in the internal market.

        The certification policies of RealTruth includes the following sentences:

        <blockquote>
            The Registration Authority must verify the following information in order to authenticate the identity of the organisation:

            <ul>
                - The data concerning the business name or corporate name of the organisation.
                - The data relating to the constitution and legal status of the subscriber.
                - <b>The data concerning the extent and validity of the powers of representation of the applicant.</b>
                - The data concerning the tax identification code of the organisation or equivalent code used in the country to whose legislation the subscriber is subject.

        The TSP (RealTruth in this case) performs the verifications against `Authentic Sources`.

        <blockquote>
            Authentic Sources are the public or private repositories or systems recognised or required by law containing attributes about a natural or legal persons.
            
            The Authentic Sources in scope of Annex VI of the [eIDAS2] legislative proposal are sources for attributes on address, age, gender, civil status, family composition, nationality, education and training qualifications titles and licences, professional qualifications titles and licences, public permits and licences, financial and company data.
            
            Authentic Sources in scope of Annex VI are required to provide interfaces to Qualified Electronic Attestation of Attributes  (QEAA) Providers to verify the authenticity of the above attributes, either directly or via designated intermediaries recognised at national level.
            
            Authentic Sources may also issue (Q)EAA-s themselves if they meet the requirements of the eIDAS Regulation. It is up to the Member States to define terms and conditions for the provisioning of these services, but according to the minimum technical specifications, standards, and procedures applicable to the verification procedures for qualified electronic attestations of attributes.

        In accordance to the policies, RealTruth made those validations when issuing the certificate to the COO, in such a way that the Relying Parties verifying the certificate can have a high level of trust in the assertion that the natural person identified in the certificate (with Spanish ID of 56565656V) is a legal representative of he GoodAir company (organizationIdentifier VATES-12345678).

    <section>John Doe: an administrative employee of GoodAir

        This is an employee of the central administration department of GoodAir, who is going to be formally nominated to manage a specific set of processes on behalf of GoodAir in the Data Space. In particular, this employee is going to be nominated as a LEAR (Legal Entity Appointed Representative).

        As its name implies, the LEAR has to be nominated by a <b>legal representative</b> of the GoodAir organisation with the necessary legal authority to commit the organisation for this type of decision. In our case, the COO of GoodAir will nominate John Doe as the LEAR of GoodAir, delegating to him the capabilities to perform some processes in the DOME portal and some other tasks in other organisations. That means that John Doe will not be empowered to perform cation snot explicitly specified in the credential.

        To perform the nomination, the COO of GoodAir (a legal representative of GoodAir) will issue a special credential to John Doe and will sign the credential with his certificate for signatures as legal representative of GoodAir. The details are described later in this document.

    <section>DOME: an instance of a Data Space for Smart Cities

        DOME is a Data Space where local governments can procure data and services from other entities that act as service providers. At the same time, the local governments can also act as data and service providers for other entities in the Data Space.

        The DOME Data Space has an portal service that allows external entities to perform some processes in an automated fashion by using Verifiable Credentials that have been issued by trusted entities. The complete Trust Framework used by DOME is composed from a series of Trust Frameworks, some managed internally using a governance model of DOME and some others managed externally but by trusted entities. At the root of the Trust Framework of DOME is the eIDAS Trust Framework and the pan-european recognized list of Trust Service Providers issuing the eIDAS compliant digital identities, in the form of certificates for signatures/seals.

        In order to participate in DOME, every legal person requires a certificate for seals or that one of its legal representatives has a certificate for signatures (or both). The DOME entity is registered in France with VAT number <b>VATFR-99999999</b>.


<section>The LEARCredential

    We use here a LEARCredential, described in detail in [[DID-ONBOARDING]], with different roles and duties embedded into the credential. The credential enables the employee (or subcontractor) to perform a specific sets of processes in the ecosystem, including interacting with other organisations in the ecosystem.

    We describe here the differences with respect to the example presented in [[DID-ONBOARDING]], to show how organisations can use LEARCredentials to enable secure, efficient, scalable and decentralised IAM (Identity and Access Management) to enable access to protected resources.

    The process of generation of the credential is the same, where the legal representative of the organisation will use his eIDAS certificate to sign the credential.

    The credential will be generated with an application that the COO will use as VC Issuer and that allows the employee to receive the credential using his credential wallet, using [[OpenID.VCI]] to achieve compliance with the EUDI Wallet ARF.

    The application enables the COO to specify the information required to create the LEARCredential, specifying the employee information and the specific type of LEARCredential. In general, there may be different instances of LEARCredentials for different purposes. One employee can have more than one LEARCredential, each having a different delegation of powers for different environments.

    <section>Claims identifying the employee

        These are claims identifying the subject of the credential, the person who will act as LEAR. Each Data Space can define their own depending on their specific requirements.
        
        In addition, each organisation can specify their own for enabling access to its products/services. However, it is advisable to do this only when it is strictly required, and it is recommended to use a set of claims that are agreed upon by all participants in the ecosystem. This includes not only the amount of claims but also their syntax and semantics.

        An example set of claims is the following:

        <x-code .json>
            {
                "title": "Mr.",
                "first_name": "John",
                "last_name": "Doe",
                "gender": "M",
                "postal_address": "",
                "email": "johndoe@goodair.com",
                "telephone": "",
                "fax": "",
                "mobile_phone": "+34787426623"
            }


    <section>DID of the employee

        The identifier of the employee is generated in exactly the same way as described in [[DID-ONBOARDING]], so we will not repeat it here.

        An example could be:

        <x-code .json>
            {
                "id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
            }

        With the DID for the employee, the set of claims identifying him would be then:

        <x-code .json>
            {
                "id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
                "title": "Mr.",
                "first_name": "John",
                "last_name": "Doe",
                "gender": "M",
                "postal_address": "",
                "email": "johndoe@goodair.com",
                "telephone": "",
                "fax": "",
                "mobile_phone": "+34787426623"
            }

    <section>`legalRepresentative`

        The legal representative is the same natural person as in [[DID-ONBOARDING]], that is the COO of GoodAir, represented in the credential as:

        <x-code .json>
            "legalRepresentative": {
                "cn": "56565656V Jesus Ruiz",
                "serialNumber": "56565656V",
                "organizationIdentifier": "VATES-12345678",
                "o": "GoodAir",
                "c": "ES"
            }

    <section>`rolesAndDuties` of the LEAR

        The `rolesAndDuties` are specified in the same way as in [[DID-ONBOARDING]], but the contents are different depending on the specific roles that the employee will have.

        A simplistic implementation of the object inside the credential could be:

        <x-code .json>
            "rolesAndDuties": [
                {
                    "type": "LEARCredential",
                    "id": "https://dome-marketplace.eu//lear/v1/6484994n4r9e990494"
                }
            ]

        Where the last part of the url can correspond to the hash of the external linked document to ensure that any modification or tampering can be detected. The contents of that object ata that url could be:

        <x-code .json>
            [
                {
                    "id": "https://dome-marketplace.eu//lear/v1/6484994n4r9e990494",
                    "target:"https://bae.dome-marketplace.eu/"
                    "roleNames": ["seller", "customer"]
                }
            ]

        In the above example, we have specified that the roles object referenced in the credential with `id: https://dome-marketplace.eu//lear/v1/6484994n4r9e990494` is granting the employee of GoodAir (in our example) to access services in the DOME marketplace (specified with the field `target`) with the roles `seller` and `customer` (which are the roles of the <a href="https://business-api-ecosystem.readthedocs.io/en/latest/index.html">FIWARE BAE component</a>).

        If `target` is omitted, the roles would apply to any target organisation. If we need to specify more than one target organisation, the array should include as many objects as required.

        <x-note>
            The way we have specified the roles is just an example. There is work ongoing to define the detailed mechanism formally (e.g. with ODRL), and it is expected to change. This example is intended only to describe the concepts in detail.


    <section>Assembling the pieces together

        With the above values for the example, the complete LEARCredential would become something like this:

        <x-code .json>
            {
                "@context": [
                    "https://www.w3.org/2018/credentials/v1",
                    "https://dome-marketplace.eu//2022/credentials/learcredential/v1"
                ],
                "id": "urn:did:elsi:25159389-8dd17b796ac0",
                "type": ["VerifiableCredential", "LEARCredential"],
                "issuer": {
                    "id": "did:elsi:VATES-12345678"
                },
                "issuanceDate": "2022-03-22T14:00:00Z",
                "validFrom": "2022-03-22T14:00:00Z",
                "expirationDate": "2023-03-22T14:00:00Z",
                "credentialSubject": {
                    "id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
                    "title": "Mr.",
                    "first_name": "John",
                    "last_name": "Doe",
                    "gender": "M",
                    "postal_address": "",
                    "email": "johndoe@goodair.com",
                    "telephone": "",
                    "fax": "",
                    "mobile_phone": "+34787426623",
                    "legalRepresentative": {
                        "cn": "56565656V Jesus Ruiz",
                        "serialNumber": "56565656V",
                        "organizationIdentifier": "VATES-12345678",
                        "o": "GoodAir",
                        "c": "ES"
                    },
                    "rolesAndDuties": [
                        {
                            "type": "LEARCredential",
                            "id": "https://dome-marketplace.eu//lear/v1/6484994n4r9e990494"
                        }
                    ]
                }
            }

        Which is virtually identical to the one described in [[DID-ONBOARDING]].


<section>Issuing the LEARCredential

    <section>Overview

        The issuance process of the LEARCredential used here is exactly the same as the one described in [[DID-ONBOARDING]] so we will focus on the differences.

    <section>Authentication

        This is exactly as in [[DID-ONBOARDING]].

    <section>Credential Offer

        This is exactly as in [[DID-ONBOARDING]].

    <section>Credential Issuer Metadata

        This is exactly as in [[DID-ONBOARDING]].

    <section>OAuth 2.0 Authorization Server Metadata

        This is exactly as in [[DID-ONBOARDING]].

    <section>Access Token

        This is exactly as in [[DID-ONBOARDING]].

    <section>Request and receive Credential


        This is exactly as in [[DID-ONBOARDING]].


<section>Authenticating with the LEARCredential

    <section>Overview

        The diagram below is describes the high level logical architecture that we will be use as a reference for the detailed explanations in the next sections.

        The diagram uses the logical concepts also used in the XACML reference architecture, but the description is agnostic to the actual policy language used in a concrete implementation.

        In this description we assume that the user is a natural person who wants to access a protected resource. However, the architecture support machine-to-machine (M2M) interactions. The differences will be described in the description when they are relevant.


        <x-img @images/login_in_DOME/authn_architecture_numbered.drawio.png>Architecture overview 



        We assume here that the user sends a request to perform a protected operation, which we define as any operation that requires authorisation.

        An example is an operation on resources controlled by Company A, where Company A allows a subset of employees of Company B to perform the operation. Another similar example is when Company A allows a subset of machines/devices of Company B to perform the operation.

        There are several high level scenarios which are possible:

        <ul>
            <li>The user navigates first to a general Login page in the portal of the Relying Party and authenticates. After authentication the portal presents a collection of services that the user can access. The user selects one of the services/operations and the Relying Party executes the operation if the user is authorised to do so.

            <li>The user tries to access the protected resource directly (maybe using a specific URL, or invoking and endpoint with input data identifying the resource).

                If the user is not authenticated, the system will reject the request. If the user is a natural person accessing the portal via an Internet browser, the typical approach is to redirect the browser to the Login page using an HTTP Status of 302. The redirection includes enough information so the authentication component can send back the user to the original request if the user completes authentication successfully.

                If the user is a machine using an API, the system can simply reject the request or reject it including information in the response that the caller can interpret to perform the login and retry.


    <section>Starting the OpenID for Verifiable Presentations flow

        In this section we assume that the user tries to access a protected resource and that the user is not authenticated. The flow when the user is already authenticated is the same, just skipping the authentication phase (steps 1 to 6).

        The authentication process starts an OpenID for Verifiable Presentations flow combined with the Self-Issued OP v2 specification [[OpenID.SIOP2]], where the VC Verifier component of the portal plays the role of a Relying Party (RP in Open ID Connect terminology) and the wallet of the user is a Self-Issued IdP.
        
        In this step, the Verifier has to send an Authorization Request to the wallet. But as a Self-Issued OP may be running locally as a native application or progressive web application (PWA), the RP may not have a network-addressable endpoint to communicate directly with the OP. We have to leverage the implicit flow of OpenID Connect to communicate with such locally-running Ops, as described in [[OpenID.SIOP2]].

        We use a QR code to start the process and allow the wallet to receive the Authorization Request from the Verifier, and respond with an Authorization Response, sent to the Verifier in the body of an HTTP `POST` request.

        <x-diagram .plantuml>Starting the authentication phase
            box "Company" #WhiteSmoke
                actor "User" as user
                participant "Wallet" as mobile
                participant "Laptop" as browser
            end box
            box "Relying Party" #WhiteSmoke
                participant "Portal" as portal
                participant "VC Verifier" as verifier
            end box

            user -> browser ++: **(1)** Access DOM portal
            # -(1) The user (GoodAir employee) uses his Laptop browser to access the DOME portal to perform the onboarding process.

                We assume in this scenario a cross-device interaction, that is, the user accesses the portal services with a PC browser, but authentication is performed with a mobile using Verifiable Credentials, as in typical 2-factor authentication.

            browser -> portal --++: **(2)** Access DOM portal
            # -(2) The browser sends a request to the Packet Delivery portal server.

            portal -> browser --++: **(3)** HTTP 302 (redirect)
            browser -> verifier --++: **(3 cont)** Access Login page
            # -(3) The portal redirects the user to the login page of the Verifier component of DOME Onboarding. The page shows a button labelled “Login with Verifiable Credentials” or something similar.

            verifier -> verifier: **(4)** Generate QR code
            # -(4) The Verifier generates a QR code, containing inside the URL of the `/authentication-requests` endpoint of the Verifier component which will be used to start the [[OpenID.VP]] process.

                A QR code is used because a Self-Issued OP may be running locally as a native application or progressive web application (PWA), the RP may not have a network-addressable endpoint to communicate directly with the OP. We have to leverage the implicit flow of OpenID Connect to communicate with such locally-running Ops, as described in [[OpenID.SIOP2]].

                <x-code .ini>
                    https://verifier.dome-marketplace.eu/authorization-requests?state=af0ifjsldkj

            # -(5) The QR code is displayed in the user browser with instructions to scan it and go to the URL inside it.

                <figure #qr_code_authreq>
                    <img src="images/qrcode-authreq.png" alt="" />

                    <figcaption>QR code with the example Authorization Request endpoint inside

            verifier -> browser --: **(5)** Display QR code

            # -(6) The user scans the QR with his wallet and tells the wallet to go to the URL in the QR.
            user -> mobile ++: **(6)** Start QR scan
            browser --> mobile: Scan QR code

            mobile -> verifier --++: **(7)** GET /authorization-requests
            # -(7) After confirmation by the user, the wallet performs a `GET /authentication-requests` to the endpoint that was inside the QR code. The reply to the GET request is an Authorization Request


            verifier -> verifier: **(8)** Create Authorization Request
            # -(8) The VC Verifier creates a SIOP Authentication Request. The parameters comprising a request for verifiable presentations are described in detail in the next section

            verifier -> mobile --: **(9)** Reply with Authorization Request
            # -(9) The Verifier replies to the wallet with the Authorization Request


    <section>Generating the Authorization Request

        The Authorization Request travels in the response body of the HTTP GET request performed in the previous point, as a JWT signed by the DOME onboarding service, using the eIDAS certificate for seals that corresponds to the legal person operating the service and with the JAdES signature format.

        The parameters comprising a request for verifiable presentations are given in section 5 of [[OpenID.VP]] and in section 10.1 of [[OpenID.SIOP2]] and are reproduced here with the particularities of this use case, in particular taking into account that this is a cross-device interaction:

        <ul>

            -(response_type) (REQUIRED). Must be `vp_token`. This parameter is defined in [[RFC6749]]. The possible values are determined by the response type registry established by [[RFC6749]]. The [[OpenID.VP]] specification introduces the response type `vp_token`. This response type asks the Wallet to return only a VP Token in the Authorization Response, which is what we want in our case.

            -(scope) (REQUIRED). This parameter is defined in [[RFC6749]] which allows it to be used by verifiers to request presentation of credentials by utilizing a pre-defined scope value designating the type of credential. See section <x-ref request_scope> for more details. We use in this instance the value `dome.credentials.presentation.LEARCredential` which means that the RP (DOME onboarding service) is asking the SIOP (user wallet) to send a credential of type `LEARCredential`.

            -(response_mode) REQUIRED. MUST be `direct_post`. As this is a cross-device scenario, this response mode is used to instruct the Self-Issued OP to deliver the result of the authentication process to a certain endpoint using the HTTP POST method. This endpoint to which the SIOP shall deliver the authentication result is conveyed in the parameter `redirect_uri` described below.

            -(redirect_uri) (REQUIRED). MUST be a valid RP endpoint. The Authentication Response is sent to this endpoint using `POST` and encoding `application/json`).

            -(client_id) REQUIRED. MUST be the DID of the RP (DOM onboarding entity) so it can be resolved by the SIOP and checked against a Trusted List, or rejected if it does not pass validation. This provides a high level of assurance to the SIOP that the RP is really who it claims.

            -(client_id_scheme) REQUIRED. MUST have the value `did`. This value indicates that the Client Identifier is a DID defined in [[DID-Core]]. The request MUST be signed with a private key associated with the DID. To obtain the corresponding private key, the Wallet MUST use DID Resolution defined by the DID method used by the Verifier. For most DID methods and since the associated DID Document may include multiple public keys, a particular public key used to sign the request in question MUST be identified by the kid in the JOSE Header. However, in our case the Verifier uses `did:elsi` and so the request MUST be signed with the eIDAS certificate according to the [[ETSI-JADES]] format, which defines the mechanism to identify the public key.
            
                All Verifier metadata other than the public key MUST be obtained from the client_metadata or the `client_metadata_uri parameter` as defined in Section 5 of [[OpenID.VP]].

            -(nonce) REQUIRED. This parameter follows the definition given in [[OpenID.Core]]. It is used to securely bind the verifiable presentation(s) provided by the wallet (SIOP) to the particular transaction managed by the RP.

            -(state) REQUIRED. Used by the portal component of DOM onboarding to associate the start of an authentication session with the end of that session when the RP Verifier component notifies to the portal.

            -(presentation_definition) CONDITIONAL. A string containing a `presentation_definition` JSON object as defined in Section 4 of [[DIF.PresentationExchange]]. We do not use this parameter because `scope` already specifies the credential type.

            -(presentation_definition_uri) CONDITIONAL. A string containing a URL pointing to a resource where a `presentation_definition` JSON object as defined in Section 4 of [[DIF.PresentationExchange]] can be retrieved. We do not use this parameter because `scope` already specifies the credential type.


        Note: A request MUST contain either a `presentation_definition` or a `presentation_definition_uri` or a single `scope` value representing a presentation definition, those three ways to request credential presentation are mutually exclusive. We use here the `scope` mechanism, which is simpler and fits our use case.

        This is an example request object using the definitions above:

        <x-code .ini>
            openid://?
            scope=dome.credentials.presentation.LEARCredential&
            response_type=vp_token&
            response_mode=direct_post&
            client_id=did:elsi:VATFR-99999999&
            redirect_uri=https://verifier.dome-marketplace.eu/api/authentication_response&
            state=af0ifjsldkj&
            nonce=n-0S6_WzA2Mj

        (URL encoding removed, line breaks and leading spaces added for readability).

        As mentioned above, the Authentication Request is returned to the wallet in the reply body of the GET request, as a JWT in JWS form [[RFC7515]]), signed with eIDAS certificate of the DOM onboarding legal person.

        This is an example of the unencoded contents of the payload of the JWT:

        <x-code .json>
            {
                "iss": "did:elsi:VATFR-99999999",   // Should correspond with the client_id in the AR
                "sub": "did:elsi:VATFR-99999999",   // Should correspond with the client_id in the AR
                "aud": "https://self-issued.me/v2", // As specified in section 5.5 of OIDC4VP
                "iat": 1667194901,
                "exp": 1667194961,                  // To avoid replays, here it expires in 60 secs
                "auth_request": "openid://?scope=...&amp;response_type=vp_token&amp;...",
            }

        Where the claims `iss` and `sub` MUST be the DID of the RP (in this case DOME onboarding) and MUST correspond exactly with the `client_id` parameter in the Authorization Request. The claim `auth_request` contains the Authentication Request as a string. The expiration time in claim `exp` avoids replays and can be very short because it is used by the Wallet just on reception of the Authentication Request. The expiration time should be enough for the user to review the Authorization Request, decide the credential(s) to send to the RP and instruct the Wallet to send the Authorization Reply to the RP.


    <section>Verification of the Authorization Request


        Before sending the Authentication Response, the wallet should verify that the Authorization Request is correct. The most important verifications are described here:

        <x-diagram .plantuml>Starting the authentication phase
            box "Company" #WhiteSmoke
                actor "User" as user
                participant "Wallet" as mobile
                participant "Laptop" as browser
            end box
            box "Relying Party" #WhiteSmoke
                participant "Portal" as portal
                participant "VC Verifier" as verifier
            end box


            verifier -> mobile --++: **(9)** Reply with Authorization Request

            mobile -> mobile: **(10)** Verification of signature of Authorization Request
            # -(10) Verification of the signature. As mentioned in the previous section, the Authorization Request is received as a JWT signed by the DOME onboarding service, using the eIDAS certificate for seals that corresponds to the legal person operating the service. This allows the wallet to verify that the signature corresponds to a real-world entity.

            mobile -> mobile: **(11)** Verification of the identity of the Relying Party
            # -(11) Verification that the DID in the `client_id` field of the Authorization Request corresponds to the entity that signed the Authorization Request. This is easy in our case because we use the `did:elsi` method.

            mobile -> mobile: **(12)** Verification of the trusted nature of the RP
            # -(12) Verification that the entity identified in the `client_id` field of the Authorization Request is a trusted entity belonging to the ecosystem, by resolving the DID in the `client_id` field.

                The actual mechanism may vary depending on the DID method used and the ecosystem where the client wants to onboard.
                
                If the Relying Party is a well known entity (like the DOME onboarding service in the case of DOME), it is easy to verify that the DID corresponds to the Relying Party.

                In most other cases, for example when the Relying Party is a participant in the ecosystem, we assume that the ecosystem provides a Trusted Participants Registry with an API compatible with the EBSI Trusted Issuers Registry, and that the participants registry is managed in a trusted way by the onboarding service (meaning that the Wallet user trusts on the onboarding service, in the same way as all other participants).
                
                In this case, to check if the DID is a participant on the ecosystem, the wallet sends a `GET /api/did/v1/identifiers/{did-to-verify}` request to the endpoint of one of several trusted servers implementing the functionality to query the Trusted Participant Registry, where `{did-to-verify}` is the actual DID the Wallet wants to check (in our example it would be `did:elsi:VATFR-99999999`, corresponding to the RP) . The API returns a JSON document as a DID Document. The DID Document (as per W3C) contains relevant information about the entity owner of the DID. It contains its Public Key, used to verify the digital signature of the entity. It also contains the status of the entity in the ecosystem. It is extensible and can contain any public information which may be relevant for the use case. The API must be operated by a trusted entity for the Wallet user. There may be as many servers implementing the API as needed and operated by different entities. At least one of those trusted entities has to be configured in the Wallet of the user, to facilitate the use of the wallet.

    <section>Creating and sending the Authorization Response 

        Once the Authorization Request has been validated, the Wallet creates an Authorization Response to be posted in the `redirect_uri` specified by teh RP in the Authorization Request. For completeness, we describe in the following figure the complete process from reception of Authorization Request until sending the Authorization Response.

        <x-diagram .plantuml>Starting the authentication phase
            box "Company" #WhiteSmoke
                actor "User" as user
                participant "Wallet" as mobile
                participant "Laptop" as browser
            end box
            box "Relying Party" #WhiteSmoke
                participant "Portal" as portal
                participant "VC Verifier" as verifier
            end box

            verifier -> mobile --++: **(9)** Reply with Authorization Request

            mobile -> mobile: **(10)** Verification of signature of Authorization Request

            mobile -> mobile: **(11)** Verification of the identity of the Relying Party

            mobile -> mobile: **(12)** Verification of the trusted nature of the RP

            mobile -> mobile: **(13)** Create Authorization Response
            # -(13) The wallet creates an Authorization Response to be posted in the `redirect_uri` specified by GoodAir in the Authorization Request that was sent to the wallet. The contents of the Authorization Response are described below.

                The response is constructed as defined in section 6.1 of [[OpenID.VP]]. In particular, because the Authorization Request included only `vp_token` as the `response_type`, the VP Token is provided directly in the Authorization Response and a separate `id_token` is not needed.

                The contents of the Authorization Response in our specific use case are:

                <x-code .ini>
                    presentation_submission=[see definition below]
                    &vp_token=[see definition below]

                The content of the `presentation_submission` parameter in the above Authorization Response is:

                <x-code .json>
                    {
                        "definition_id": "OnboardingPresentationDefinition",
                        "id": "OnboardingPresentationSubmission",
                        "descriptor_map": [
                        {
                            "id": "id_credential",
                            "path": "$",
                            "format": "ldp_vp",
                            "path_nested": {
                                "format": "ldp_vc",
                                "path": "$.verifiableCredential[0]"
                            }
                        }
                        ]
                    }

                Which complies with [[DIF.PresentationExchange]] and refers to the Verifiable Presentation in the `vp_token` parameter provided in the same response. In our example, the Verifiable Presentation includes the LEARCredential that was described in the previous sections.

            mobile -> verifier ++: **(14)** POST /api/siop/authorization_response
            # -(14) The wallet sends the Authorization Response to the endpoint received in the `redirect_uri` parameter of the Authorization Request, sending an HTTP `POST` request using the encoding `application/x-www-form-urlencoded`.

                <x-code .http>
                    POST /api/siop/authorization_response HTTP/1.1
                    Host: verifier.dome-onboarding.org
                    Content-Type: application/x-www-form-urlencoded

                    presentation_submission=[see definition below]
                    &vp_token=[see definition below]


    <section>Authenticating the user with the LEARCredential

        We should remember that inside the LEARCredential the `credentialSubject` object has an `id` field with value `did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK` which is the DID of the user. It was generated during the creation of the LEARCredential, and the Relying Party should trust that the credential was generated in the proper way binding cryptographically the DID with the LEARCredential, as described in a previous section. It is the same trust that should be put in the generation of any other signed document, like a contract or invoice.

        The process of verifying the Authorization Response and authenticating the user with the LEARCredential is the following:

        <x-diagram .plantuml>Starting the authentication phase
            box "Company" #WhiteSmoke
                actor "User" as user
                participant "Wallet" as mobile
                participant "Laptop" as browser
            end box
            box "Relying Party" #WhiteSmoke
                participant "Portal" as portal
                participant "VC Verifier" as verifier
            end box

            mobile -> verifier ++: (14) POST /api/siop/authorization_response

            verifier -> verifier: (15 and 16) Verify signature\nand issuer of\nLEARCredential
            # -(15 and 16) The Verifier receives the Authorization Request and has to perform verifications, the standard ones being defined in [[DIF.PresentationExchange]]. In order to verify that the Verifiable Credential has been issued by a trusted entity, the Relying Party has to verify:

                <ol>
                    - That the DID of the entity which is the issuer of the VC is a trusted entity.
                    - That the VC was signed by that participant.

                Both verifications can be done by performing DID resolution, checking that the resulting DID Document contains the public key corresponding to the one specified in the Verifiable Credential, and by verifying the digital signature of the credential against that public key.

                In our case the LEARCredential was issued using the `did:elsi` method, so resolution is very simple and is specified in [[DID-ELSI]].

            verifier -> verifier: (17) Verify sender of the\nAuthorization Response
            # -(17) After verifying the credential, the Relying Party can also verify that the Verifiable Presentation including the Verifiable Credential is sent by the user and not by a malicious agent. To do so, it uses the public key associated to the `did:key` identifier `id` field inside the `credentialSubject` structure. That public key is cryptographically bound to the customer DID during the onboarding process that GoodAir performed with its employee.

            verifier -> verifier: (18) Generate Access Token
            # -(18) The Verifier creates an Access Token for the user so it can be used later for access services provided by the Relying Party (in the case of onboarding, those services would be the ones related to the onboarding process implemented by the Onboarding portal). The Access Token is generated in JWT format and signed by the VC Verifier. The access token is intended for use as bearer token over HTTP [[RFC2616]] using Transport Layer Security (TLS) [[RFC5246]] to access protected resources, and it should use the JWT Profile profile described in [[RFC9068]].

                For our use case, the payload of the JWT access token looks like:

                <x-code .json>
                    {
                        "iss": "did:elsi:VATFR-99999999",
                        "sub": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
                        "aud":   "https://dome-marketplace.eu/onboarding",
                        "exp": 1639528912,
                        "iat": 1618354090,
                        "jti" : "dbe39bf3a3ba4238a513f51d6e1691c4",
                        "client_id": "did:elsi:VATFR-99999999",
                        "scope": "vp_token",
                        "verifiableCredential": ["the VC that was received inside the Verifiable Presentation"]
                    }

                Where, according to [[RFC9068]]:

                <ul>
                    - `iss` and `client_id` have the same value because the access token has been generated by the Verifier component of the DOME onboarding service, acting as the DOME legal person.

                    - `sub` identifies the user (employee of GoodAir acting as LEAR of the company) using the DID inside the Verifiable Credential received

                    - `aud` identifies the RS (Resource Server) component in Packet Delivery. In this case we assume that it is internal and does not have a DID assigned, so we use the URI of the component.

                    - `kid` in the header identifies the key that is used to sign the JWT and which must be configured up-front and known by the RS (Resource Server.

                    - `scope` has the same value as the equivalent `scope` parameter in the initial Authorization Request.

                    - `verifiableCredential` contains the Verifiable Credential that was received, specifically the value of the first element of the field `verifiableCredential` of the Verifiable Presentation.

            verifier -> mobile: (19) HTTP 200 with <access token>
            # -(19) The Verifier sends a successful response to the POST request from the wallet. The wallet receives the response to the POST indicating the success or failure of the process. The Verifier continues processing because the web portal of Packet Delivery has to be refreshed with the services that this specific user can access, based on the information received in the Verifiable Credential and the access control policies implemented by the DOME portal.

            verifier -> portal --++: (20) Notify with\n<access token> and <state>
            # -(20) The Verifier notifies the DOME portal to refresh the login page so it can present the services to the user. The notification includes the following:

                <ul>
                    - The `state` nonce that was generated by the portal when it generated the QR code. The portal uses the `state` nonce to know what login session is being notified.

                    - The access token generated before.

                The notification is a simple POST request with both parameters in the body:

                <x-code .http>
                    POST /api/notify HTTP/1.1
                    Host: dome-marketplace.eu
                    Content-Type: application/x-www-form-urlencoded

                    access_token=[the access token]
                    &state=af0ifjsldkj

                The portal component replies immediately and continues processing.

            portal -> browser --: (21) Refresh screen\nwith services and include\n<access token>
            # -(21) The portal of the Relying Party refreshes the screen and displays the services available to users, sending the Access Token to the browser of the user. The Access Token will be sent back by the browser to the portal whenever the user tries to access a protected resource of the portal, and so access control can be performed using the data inside the token, in the same way as with any other access token in other authentication mechanisms.
            


<section>Access control with the LEARCredential

    <section>Overview

        This section assumes that authentication has already been performed and that the Relying Party receives a request to a protected resource, with a proper access token inside the request. If the request does not come with an access token, the request is rejected immediately (or the user is redirected to the Authentication service of the Relying Party, depending on the use case).

        The Access Control mechanism described here is the same independently of whether the request comes from a user or a machine, so the M2M use case is supported without any modification. In the following description we will use the term `user` interchangeably for both the user as a natural person or the user as a machine.

        However, the assumption is that all machines have an identity (they are assigned an identifier), and that they are acting `on behalf of` a legally valid identity in the sense of eIDAS2. In other words, we require that the identities of users and machines can be cryptographically bound to the real-world identity of either a natural person or a legal person in a way that provides legal certainty to the Relying Party regarding the chain of responsibility.

        If the user is a natural person using the portal of the Relying Party, the request to the protected resource will come from the browser that the user employs to navigate the portal, and the access token will be included automatically by the browser in every request that is sent ot the Relying Party, for example when the user clicks a button or fills a form.

        If the user is a server or device, it is assumed that it has obtained an access token previously as the result of an authentication process described above. The server or device is responsible for including the access token in every request that is sent to the Relying Party to access a protected resource.

        If the portal of the Relying Party is an onboarding process (eg., the portal of the DOME Onboarding service), the protected resource could be the onboarding service itself, or a service to upload additional information for a partially completed onboarding process.

        If the portal is a Marketplace and the organisation using the portal wants to offer products in it, these services could be to register the organisation as a <i>Seller</i>, or to create a Product specification and offering.
        
        If the portal is the Marketplace and the organisation wants to contract products in it, these services could be to register the organisation as a <i>Customer</i>, or to launch a procurement order of a product.

        The same mechanism can be used by any participant in the ecosystem, if they want to use an advanced IAM mechanism which is aligned with the EU strategy on digital identity based on Verifiable Credential and eIDAS2.

        For the explanation we will use the following figure which is based on [[[NIST-AUTH]]] which describes a reference architecture with necessary functional components to achieve enforcement the authorization policies. The authorization process depends on four layers of functionality: <b>Enforcement</b>, <b>Decision</b>, <b>Access Control Data</b>, and <b>Administration</b>.

        <figure #authn-reference>
            <img src="images/login_in_DOME/authn_architecture_authorization.drawio.png" alt="" />

            <figcaption>High level Authentication logical architecture


    <section>Determine the Authorization Policies which apply to the request 

        Every request to a protected resource is intercepted by the PEP (Policy Enforcement Point), and to know if the request should be authorised or not, the PEP asks to the PDP (Policy Decision Point) for a decision. The PDP needs to know what are the policy rules that should be applied to the request, and it uses the PRP (Policy Retrieval Point) to retrieve those policies.

        <x-diagram .plantuml>Determine the Authorization Policies
            box "Company" #WhiteSmoke
                participant "User" as user
            end box
            box "Relying Party" #WhiteSmoke
                participant "PEP" as pep
                participant "PDP" as pdp
                participant "PRP" as prp
                participant "PIP" as pip
                participant "Resource" as resource
            end box
            participant "Trust Framework" as trust

            user -> pep --++: **(1)** Access protected resource
            # -(1) The user (natural person or machine) sends a request to access a protected resource, and the PEP (Policy Enforcement Point) component intercepts the call. The PEP is normally implemented as a reverse proxy or API gateway, so all calls to protected resources entering the organisation are intercepted and forwarded if they are accepted.

            pep -> pdp --++: **(2)** Request a decision
            # -(2) If the request is not authenticated it is rejected with an error. Depending on the use case, the error returned can contain additional information that enables the user agent to be redirected to perform authentication.
            
                After inspecting the request, the PEP requests a decision from the PDP passing a series of attributes. In general, the request from the PEP to the PDP consists of <b>subject</b> attributes (typically for the user who issued the request), <b>resource</b> attributes (the resource for which access is sought), <b>action</b> attributes (the operations to be performed on the resource), and <b>environment</b> attributes.

                Some of the above attributes are obtained by the PEP from the original request received from the user. For example, the HTTP verb (GET, POST, PUT, PATCH, DELETE) and the URL and possibly the body of the request provide action attributes. Specifically, in the case of an NGSI-LD request those attributes are formally specified in the NGSI-LD standard.

                The subject attributes most relevant for access control are located in the access token received with the request. In particular, the access token includes the Verifiable Credentials that were employed for authentication, and the claims in those credentials can be used to evaluate access control policies. This includes (but is not limited to) the roles object that may be included in the VerifiableID credential used for authentication.

                An example access token would be:

                <x-code .json>
                    {
                        "token_type": "Bearer",
                        "expires_in": 3600,
                        "access_token": "ewogICJhbGciOiAiR...ERBIgogIH0KfQ"
                    }

                Decoding the `access_token` field we could see a Verifiable Presentation including the LEARCredential that the user presented when authenticating:

                <x-code .json>
                    {
                        "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://dome-marketplace.eu//2022/credentials/learcredential/v1"
                        ],
                        "id": "urn:did:elsi:25159389-8dd17b796ac0",
                        "type": ["VerifiableCredential", "LEARCredential"],
                        "issuer": {
                            "id": "did:elsi:VATES-12345678"
                        },
                        "issuanceDate": "2022-03-22T14:00:00Z",
                        "validFrom": "2022-03-22T14:00:00Z",
                        "expirationDate": "2023-03-22T14:00:00Z",
                        "credentialSubject": {
                            "id": "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK",
                            "title": "Mr.",
                            "first_name": "John",
                            "last_name": "Doe",
                            "gender": "M",
                            "postal_address": "",
                            "email": "johndoe@goodair.com",
                            "telephone": "",
                            "fax": "",
                            "mobile_phone": "+34787426623",
                            "legalRepresentative": {
                                "cn": "56565656V Jesus Ruiz",
                                "serialNumber": "56565656V",
                                "organizationIdentifier": "VATES-12345678",
                                "o": "GoodAir",
                                "c": "ES"
                            },
                            "rolesAndDuties": [
                                {
                                    "type": "LEARCredential",
                                    "id": "https://dome-marketplace.eu//lear/v1/6484994n4r9e990494"
                                }
                            ]
                        }
                    }


                Environmental attributes, which depend on the availability of system sensors that can detect and report values, are somewhat different from subject and resource attributes, which are administratively created. Environmental attributes are not properties of the subject or resources, but are measurable characteristics that pertain to the operational or situational context in which access requests occur. These environmental characteristics are subject and resource independent, and may include the current time, day of the week, or threat level.

                The PDP computes decisions to permit or deny subject requests to perform actions on resources. In computing a decision, the PDP queries policies stored in a PRP (Policy Retrieval Point).
                
                If the attributes of the request are not sufficient for rule and policy evaluation, the PDP may need to search the PIP for additional attributes. The PIP is shown as one logical store, but in fact may comprise multiple physical stores of different types.
                
                In addition to the PIP, the PDP uses one or more Trusted Issuers Lists (to check if the issuer of the credential is included in them as a trusted issuer of that type of credential), and also the Authorization Registry (AR), which can check for finer granularity authorisation records which may be very dynamic in nature (e.g. if some resource usage by employees and machines owned by the issuer have exceeded some quota this month).

                The actual Trusted Issuers Lists that the PDP needs to check is determined by the policy rules retrieved from the PRP. Those policy rules also determine the additional queries performed to the PIP data stores.
                    
                The set of information and data stored in the PIP and PRP comprise the access control data and collectively define the current authorization state, which the PDP will use to compute its decision.


            pdp -> prp --++: **(3)** Query policies
            # -(3) The PDP asks the PRP for the policy rules applicable to this request. The policy rules may be specified using different policy languages, like ODRL, XACML or Rego. It is very difficult to make the interface between the PDP and the PRP completely transparent and independent from the concrete policy language used in an implementation. However, The PDP can be modularised in order to minimise the dependency and reduce the cost of migration to other policy language in the future.

            prp -> pdp --++: **(4)** Reply with policies
            # -(4) The PDP receives the policy rules to apply for the current request.

    <section>Determine which Trusted Issuer Lists should be queried

        After retrieving the policies from the PRP, the PDP determines what are the attributes needed by the policy rules to perform its evaluation. Some of those attributes can be determined from the request received (e.g., claims inside the Verifiable Credential(s) in the access token). But in general, the policy rules require additional attributes that have to be retrieved from other sources.

        The two logical sources of those attributes are the PIP and the Trusted Issuers Lists in the Trust Anchor Framework.

        The concept of the PIP is the same as in the standard XACML logical architecture, essentially enabling the PDP to retrieve environmental attributes required for policy evaluation.

        In our approach using Verifiable Credentials for authentication and authorization, we use a Trust Framework to determine if the credentials received in the request are issued by authorised issuers of those credentials.

        The PDP does not have hardcoded the actual Trusted Lists to query, but they are determined dynamically from the policies retrieved from the PRP. In simple use cases there may be one or two lists to query which are the same for all requests. But the mechanism described here can cater for very complex scenarios where the lists may be different depending on the requests and also from the dynamic environmental information retrieved from the PIP.

        <x-diagram .plantuml>Determine Trusted Issuer Lists to query
            box "Company" #WhiteSmoke
                participant "User" as user
            end box
            box "Relying Party" #WhiteSmoke
                participant "PEP" as pep
                participant "PDP" as pdp
                participant "PRP" as prp
                participant "PIP" as pip
                participant "Resource" as resource
            end box
            participant "Trust Framework" as trust


            prp -> pdp --++: **(4)** Reply with policies
            # -(4) The PDP receives the policy rules to apply for the current request.

            pdp -> pdp: **(5)** Initial evaluation of the policies
            # -(5) The PDP performs an initial evaluation of the policy rules and if the attributes of the request are not sufficient for rule and policy evaluation, it determines the PIP stores to query, and also the set of Trusted Issuers Lists to query. The concrete Trusted Lists to query are dynamic and depend on the specific policies associated to the request.

            pdp -> pip --++: **(6)** Query additional attributes
            pip -> pdp --++: Reply with attributes
            # -(6) Based on the policies and the attributes of the request, the PDP queries the PIP for additional attributes needed for the policy evaluation.

                Now that the PDP has the policy rules to apply and the attributes from the request and the ones retrieved from the PIP, the PDP can determine the actual Trusted Lists that have to be queried in order to be able to evaluate the policies.


    <section>Query the Trusted Issuer Lists

        The authorization mechanism uses the Trust Framework to query different Trusted Lists that are needed to evaluate the policy rules applicable to the request and compute a decision.

        The Trust Framework is composed of one or more Trusted Lists where each list is specialised in some specific domain of trust.

        For example, the Trust Framework contains Trusted Lists with the schema definitions used for the well-known types of Verifiable Credentials in the ecosystem. In this way, if the Verifiable Registry used for the Trust Framework is based on a Blockchain network (or several federated networks), the schemas can be published in a trusted and resilient manner reducing the risk of malicious tampering and keeping a record of the history of modifications.

        But the most interesting Trusted Lists in the Trust Framework are the Trusted Issuers Lists, which provide the mechanism to efficiently and securely verify that the issuer of a given credential is a Trusted Issuer of that type of credentials.

        It has to be noticed that even though most Trusted Issuer Lists are global (used by all participants in the ecosystem) and have essentially public information, there may be some specialised lists that are private to one or more organisations and specialised in some specific requirement.

        In this way, there may be some lists that are specific to the products that one organisation provides to other participants in the ecosystem. For example, there may be a Trusted Issuer List private to one organisation which is updated with the identity of a participant when that participant acquires access to some product provided by that organisation.

        For example, this "product-specific" Trusted Issuer List is queried when performing authorization if the related policy rules specify that the issuer of the Verifiable Credential received in the request should have acquired the product that the request is trying to access.

        However, as mentioned before, the set of "internal" and "external" Trusted Lists to query is not hardcoded but it depends on the specific policy rules that should be applied to the request when computing the decision to grant access or not.

        In this way, the system provides a great deal of flexibility on how access control is performed.

        For simplicity, the diagram below shows the query of the Trusted Issuer Lists as a single interaction to a single box, but the actual interactions can be very complex if required. In addition, the diagram does not specify whether the list is "private" or "global".


        <x-diagram .plantuml>Query the Trusted Issuer Lists
            box "Company" #WhiteSmoke
                participant "User" as user
            end box
            box "Relying Party" #WhiteSmoke
                participant "PEP" as pep
                participant "PDP" as pdp
                participant "PRP" as prp
                participant "PIP" as pip
                participant "Resource" as resource
            end box
            participant "Trust Framework" as trust


            pdp -> pip --++: **(6)** Query additional attributes
            pip -> pdp --++: Reply with attributes
            # -(6) Based on the policies and the attributes of the request, the PDP queries the PIP for additional attributes needed for the policy evaluation.

            pdp -> trust --++: **(7)** Query the Trusted Issuer List(s)
            trust -> pdp --++: Reply with results
            # -(7) Based on the policies and the attributes of the request, the PDP queries one or more Trusted Issuer Lists to check that the credentials received comply with the requirements specified in the policies.


    <section>Compute the decision and allow (or not) access

        Once the PDP has all the attributes required for policy evaluation, it computes a decision and returns that decision to the PEP which will enforce it.        

        <x-diagram .plantuml>Compute the decision
            box "Company" #WhiteSmoke
                participant "User" as user
            end box
            box "Relying Party" #WhiteSmoke
                participant "PEP" as pep
                participant "PDP" as pdp
                participant "PRP" as prp
                participant "PIP" as pip
                participant "Resource" as resource
            end box
            participant "Trust Framework" as trust

            trust -> pdp --++: Reply with results

            pdp -> pdp: **(8)** Final evaluation of the policies
            # -(8) The PDP performs a final evaluation of the policy rules, taking into consideration the attributes received from the PEP, the attributes received from the PIP, and the Trusted Issuers Lists queried. After the evaluation the PDP computes a decision, either to accept or to reject the request.

            pdp -> pep --++: **(9)** Return decision
            # -(9) The PDP returns the decision to the PEP, which will enforce it.

            pep -> resource --++: **(10)** Perform operation
            # -(10) If the decision from the PDP is to reject the request, the PEP returns an error to the user. Otherwise, it forwards the original request to the Resource for execution.

            resource -> pep --++: **(11)** Return result
            # -(11) The resource executes the request and returns the result.

            pep -> user --++: **(12)** Return result
            # -(12) The PEP returns the result to the user.


    <section>Summary of the authorization process

        The following diagram combines all the steps in a single one to provide an overall view of the authorization process.

        <x-diagram .plantuml>Summary of the Authorization process
            box "Company" #WhiteSmoke
                participant "User" as user
            end box
            box "Relying Party" #WhiteSmoke
                participant "PEP" as pep
                participant "PDP" as pdp
                participant "PRP" as prp
                participant "PIP" as pip
                participant "Resource" as resource
            end box
            participant "Trust Framework" as trust

            user -> pep --++: **(1)** Access protected resource

            pep -> pdp --++: **(2)** Request a decision

            pdp -> prp --++: **(3)** Query policies

            prp -> pdp --++: **(4)** Reply with policies

            pdp -> pdp: **(5)** Initial evaluation of the policies

            pdp -> pip --++: **(6)** Query additional attributes
            pip -> pdp --++: Reply with attributes

            pdp -> trust --++: **(7)** Query the Trusted Issuer List(s)
            trust -> pdp --++: Reply with results

            pdp -> pdp: **(8)** Final evaluation of the policies

            pdp -> pep --++: **(9)** Return decision

            pep -> resource --++: **(10)** Perform operation

            resource -> pep --++: **(11)** Return result

            pep -> user --++: **(12)** Return result


<section .appendix #request_scope>Request Scope

    According to section 5.3 of [[OpenID.VP]], wallets MAY support requesting presentation of credentials using OAuth 2.0 `scope` values. Such a scope value MUST be an alias for a well-defined presentation definition as it will be referred to in the `presentation_submission` response parameter.

    In this specification we define concrete scope values and the mapping between a certain scope value and the respective presentation definition, in particular the mapping between scope values and specific types of Verifiable Credentials used for access control in the use case described in this document. In a production implementation of a Data Space ecosystem, the Trust Framework has to define the mappings used in the ecosysyem and the mechanisms and governance model used to update those mappings.

    In this example we only need the mapping for the LEARCredential, where the scope `dome.credentials.presentation.LEARCredential` represents the following presentation definition:

    <x-code .json>
        {
            "id": "dome.credentials.presentation.LEARCredential",
            "input_descriptors": [
                {
                "id": "LEARCredentialDefinitionv1.01",
                "format": {
                    "ldp_vc": {
                        "proof_type": [
                            "RsaSignature2018"
                        ]
                    }
                },
                "constraints": {
                    "fields": [
                        {
                            "path": [
                                "$.type"
                            ],
                            "filter": {
                                "type": "string",
                                "pattern": "LEARCredential"
                            }
                        }
                    ]
                }
                }
            ]
        }



<section id="references">
